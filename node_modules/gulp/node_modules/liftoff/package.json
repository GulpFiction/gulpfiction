{
  "name": "liftoff",
  "description": "Launch your command line tool with ease.",
  "version": "0.9.6",
  "homepage": "https://github.com/tkellen/node-liftoff",
  "author": {
    "name": "Tyler Kellen",
    "url": "http://goingslowly.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tkellen/node-liftoff.git"
  },
  "bugs": {
    "url": "https://github.com/tkellen/node-liftoff/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tkellen/node-liftoff/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "mocha -R spec test/index.js"
  },
  "devDependencies": {
    "tap": "~0.4.8",
    "coffee-script": "~1.7.1",
    "mocha": "~1.17.1",
    "chai": "~1.9.0"
  },
  "keywords": [
    "command line"
  ],
  "dependencies": {
    "findup-sync": "~0.1.2",
    "resolve": "~0.6.1",
    "minimist": "~0.0.5",
    "extend": "~1.2.1"
  },
  "readme": "# liftoff [![Build Status](https://secure.travis-ci.org/tkellen/node-liftoff.png)](http://travis-ci.org/tkellen/node-liftoff)\n> Launch your command line tool with ease.\n\n[![NPM](https://nodei.co/npm/liftoff.png)](https://nodei.co/npm/liftoff/)\n\n## What is it?\n[See this blog post, or read on.](http://weblog.bocoup.com/building-command-line-tools-in-node-with-liftoff/)\n\nSay you're writing a CLI tool.  Let's call it [hacker](http://github.com/tkellen/node-hacker).  You want to configure it using a `Hackerfile`.  This is node, so you install `hacker` locally for each project you use it in.  But, in order to get the `hacker` command in your PATH, you also install it globally.\n\nNow, when you run the `hacker` command, you want it to use the `Hackerfile` in your current directory, and the local installation of `hacker` next to it.  It'd be nice if it traversed up your folders until it found a `Hackerfile`&mdash;for those times when you're not in the root directory of your project.  Heck, you might even want to launch it from a folder outside of your project by manually specifying a working directory.  Liftoff manages this for you.\n\nSo, everything is working great.  Now you can find your local `hacker` and `Hackerfile` with ease.  Unfortunately, it turns out you've authored your `Hackerfile` in coffee-script, or some other JS variant.  In order to support *that*, you have to load the compiler for it, and then register the extension for it with node.  Good news, Liftoff can do that too.\n\n## API\n\n### constructor(opts)\n\nCreate an instance of Liftoff to invoke your application.\n\nAn example utilizing all options:\n```js\nvar Hacker = new Liftoff({\n  name: 'hacker',\n  moduleName: 'hacker',\n  configName: 'hackerfile',\n  addExtensions: ['.anything'],\n  processTitle: 'hacker',\n  cwdFlag: 'cwd',\n  configPathFlag: 'hackerfile',\n  preloadFlag: 'require',\n  completionFlag: 'completion',\n  completions: function (type) {\n    console.log('Completions not implemented.');\n  }\n});\n```\n\n#### opts.name\n\nSugar for setting `processTitle`, `moduleName`, `configName` & `configPathFlag` automatically.\n\nType: `String`\nDefault: `null`\n\nThese are equivalent:\n```js\nnew Liftoff({\n  processTitle: 'hacker',\n  moduleName: 'hacker',\n  configName: 'hackerfile',\n  configPathFlag: 'hackerfile'\n});\n```\n```js\nnew Liftoff({name:'hacker'});\n```\n\n#### opts.moduleName\n\nSets which module your application expects to find locally when being run.\n\nType: `String`\nDefault: `null`\n\n#### opts.configName\n\nSets the name of the configuration file Liftoff will attempt to find.  Case-insensitive.\n\nType: `String`\nDefault: `null`\n\n#### opts.addExtensions\n\nExplicitly add custom extensions to include when searching for a configuration file.  Node supports `.js`, `.json` & `.node` natively, so there is no need to add these.\n\nAn example usage for this setting would be to add an `rc` extension.  e.g. with a configName of `.myapp`, you want Liftoff to look for `.myapp{rc,.js,.json,.node}`\n\nType: `Array`\nDefault: `[]`\n\n#### opts.processTitle\n\nSets what the [process title](http://nodejs.org/api/process.html#process_process_title) will be.\n\nType: `String`\nDefault: `null`\n\n#### opts.cwdFlag\n\nSets what flag to use for altering the current working directory.  For example, `myapp --cwd ../` would invoke your application as though you'd called it from the parent of your current directory.\n\nType: `String`\nDefault: `cwd`\n\n#### opts.configPathFlag\n\nSets what flag to use for defining the path to your configfile.  For example, `myapp --myappfile ../Myappfile.js` would explicitly specify the location of your config file.\n\nType: `String`\nDefault: `same as configName`\n\n#### opts.modulePathFlag\n\nSets what flag to use for defining the path to your locally installed module.  For example, `myapp --myappdir ~/` would specify the location of your config file.  This option overrides `cwdFlag`.\n\nType: `String`\nDefault: `same as configName`\n\n#### opts.preloadFlag\n\nSets what flag to use for pre-loading modules.  For example, `myapp --require coffee-script` would require a local version of coffee-script (if available) before attempting to find your configuration file.  If your required module registers a new\n[require.extension](http://nodejs.org/api/globals.html#globals_require_extensions), it will be included as an option when looking for a file matching `configName`.\n\nType: `String`\nDefault: `\"require\"`\n\n#### opts.completions(type)\n\nA method to handle bash/zsh/whatever completions.\n\nType: `Function`\nDefault: `null`\n\n### events\n\n#### require(name, module)\n\nEmitted when a module is pre-loaded.\n\n```js\nvar Hacker = new Liftoff({name:'hacker'});\nHacker.on('require', function (name, module) {\n  console.log('Requiring external module: '+name+'...');\n  // automatically register coffee-script extensions\n  if (name === 'coffee-script') {\n    module.register();\n  }\n});\n```\n\n#### requireFail(name, err)\n\nEmitted when a requested module cannot be preloaded.\n\n```js\nvar Hacker = new Liftoff({name:'hacker'});\nHacker.on('requireFail', function (name, err) {\n  console.log('Unable to load:', name, err);\n});\n```\n\n### launch(fn, argv)\n\n#### fn(env)\n\nA function to start your application.  When invoked, `this` will be your instance of Liftoff.  The `env` param will contain the following keys:\n\n- `argv`: cli arguments, as parsed by [minimist](https://npmjs.org/package/minimist), or as passed in manually.\n- `cwd`: the current working directory\n- `preload`: an array of modules that liftoff tried to pre-load\n- `validExtensions`: an array of supported extensions for your config file\n- `configNameRegex`: the regular expression used to find your config file\n- `configPath`: the full path to your configuration file (if found)\n- `configBase`: the base directory of your configuration file (if found)\n- `modulePath`: the full path to the local module your project relies on (if found)\n- `modulePackage`: the contents of the local module's package.json (if found)\n\n#### argv\nManually specify command line arguments.  Useful for invoking the CLI programmatically.\n\nType: `Object`\nDefault: `null`\n\n## Examples\nCheck out [the hacker project](https://github.com/tkellen/node-hacker/blob/master/bin/hacker.js) to see a working example of this tool.\n\nTo try the example, do the following:\n\n1. Install the sample project `hacker` with `npm install -g hacker`.\n2. Make a `Hackerfile.js` with some arbitrary javascript it.\n3. Install hacker next to it with `npm install hacker`.\n3. Run `hacker` while in the same parent folder.\n\nFor extra credit, try writing your `Hackerfile` in coffeescript.  Then, run `hacker --require coffee-script`.  Make sure you install coffee-script locally, though.\n",
  "readmeFilename": "README.md",
  "_id": "liftoff@0.9.6",
  "_from": "liftoff@^0.9.3"
}
